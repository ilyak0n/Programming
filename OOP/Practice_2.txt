#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Product {
public:
    double price;
    double weight;
    Product(double price, double weight): price(price), weight(weight) {}
    double virtual getTotalPrice() const {
        if (price < 0 || weight < 0) {
            throw 1;
        } else if (price == 0 || weight == 0) {
            throw 2;
        }
        return price*weight;
    }
};

class Apple: public Product {
private:
    string variety; //сорт
public:
    Apple(double price, double weight, string variety): Product(price, weight), variety(variety) {}
    double getTotalPrice() const override {
        if (price < 0 || weight < 0) {
            throw 1;
        } else if (price == 0 || weight == 0) {
            throw 2;
        }
        return price*weight;
    }
};

class Orange: public Product {
private:
    string origin; //страна проихождения
public:
    Orange(double price, double weight, string origin): Product(price, weight), origin(origin) {}
    double getTotalPrice() const override {
        if (price < 0 || weight < 0) {
            throw 1;
        } else if (price == 0 || weight == 0) {
            throw 2;
        }
        return price*weight;
    }
};

int main() {
    setlocale(LC_ALL, "Russian");
    vector<Product*> shapes;
    shapes.push_back(new Apple(-1,3, "Андроновка"));
    shapes.push_back(new Apple(2,0, "Андроновка"));
    shapes.push_back(new Orange(-1,9, "Гватемала"));
    shapes.push_back(new Orange(0,0, "Гватемала"));
    for (const auto& shape: shapes) {
        try {
            cout << "Общая стоимость продукта: " << shape -> getTotalPrice() << endl;
        } catch (int exeption) {
            if (exeption == 1) {
                cout << "\tОшибка! \tЦена или вес не могут быть отрицательными" << endl;
            } else if (exeption == 2) {
                cout << "\tОшибка! \tЦена или вес не должны быть нулевыми" << endl;
            }
        }
    }
    return 0;
}